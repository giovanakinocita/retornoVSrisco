# -*- coding: utf-8 -*-
"""retornoVSrisco.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J6OcRH30uafzbZ-vbBAq3UlMUOTfm77F

# Projeto: construção de gráfico para visualização de risco e retorno de ações

⚠ Os dados coletados e os gráficos construídos são para fins de estudo. Portanto, não servindo de base para investimentos.

1. Importando bibliotecas
"""

!pip install yfinance

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import yfinance as yf
import matplotlib.patches as mpatches

"""2. Obtendo dados das ações"""

ativos = ['AGRO3.SA', 'JALL3.SA', 'AGXY3.SA', 'KEPL3.SA', 'SLCE3.SA', 'SMTO3.SA', 'SOJA3.SA', 'TTEN3.SA']

inicio = '2022-01-01'
fim = '2024-01-01'

df = pd.DataFrame()

for ativo in ativos:
  df[ativo] = yf.download(ativo, start = inicio, end = fim)['Adj Close']

df.head()

df.plot()

"""3. Normalizando os dados"""

normalizado = df/df.iloc[0]

normalizado.plot()

"""4. Calculando a variação dirária dos retornos"""

retornos_diarios = df.pct_change()
retornos_diarios

"""5. Excluindo valores NaN"""

retornos_diarios = retornos_diarios.dropna()
retornos_diarios

"""6. Calculando o desvio padrão ods retornos diários"""

retornos_diarios.std()

"""7. Criando tabelas com valores de volatilidade e retornos"""

volatilidade = pd.DataFrame(retornos_diarios.std(), columns=['Vol'])

retornos = pd.DataFrame(retornos_diarios.mean(), columns = ['Retornos'])

volatilidade

retornos

"""8. Concatenando (juntando) as duas tabelas já criadas"""

risco_retorno = pd.concat([retornos, volatilidade], axis = 1)
risco_retorno

"""9. Criação do gráfico de dispersão"""

sns.scatterplot(data = risco_retorno, x = 'Vol', y = 'Retornos')

"""10. Avaliando o índice da tabela"""

range(risco_retorno.shape[0])

risco_retorno.index

risco_retorno.shape[0]

"""11. Populando uma lista com os nomes das cores a serem usadas no gráfico: A ideia é inserir nomes no lugar de pontos no gráfico de dispersão para melhor visualização dos dados."""

cor = ['red', 'cyan', 'purple', 'blue', 'yellow', 'green', 'orange', 'pink']

"""12. Utilizando a ferramenta patches para incluir e alterar elementos gráficos"""

agro3 = mpatches.Patch(color = 'red', label = 'BrasilAgro')
jall3 = mpatches.Patch(color = 'cyan', label = 'Jalles Machado')
agxy3 = mpatches.Patch(color = 'purple', label = 'Agrogalaxy')
kepl3 = mpatches.Patch(color = 'blue', label = 'Kepler Weber')
slce3 = mpatches.Patch(color = 'yellow', label = 'SLC Agrícola')
smto3 = mpatches.Patch(color = 'green', label = 'São Martinho')
soja3 = mpatches.Patch(color = 'orange', label = 'Boa Safra Sementes')
tten3 = mpatches.Patch(color = 'pink', label = 'Tres Tentos Agroindustrial')

plt.subplots(figsize = (8, 5))
plt.xlim(0.020, 0.040)
plt.ylim(-0.0020, 0.0020)
plt.xlabel("Volatilidade")
plt.ylabel("Retorno")
plt.legend(handles = [agro3, jall3, agxy3, kepl3, slce3, smto3, soja3, tten3])

for i in range(risco_retorno.shape[0]):
  plt.text(x = risco_retorno.Vol[i], y = risco_retorno.Retornos[i], s = risco_retorno.index[i],
           fontdict = dict(color = cor[i], size = 12), bbox = dict(facecolor = 'black'),)